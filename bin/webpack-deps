#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var archy = require('archy');
var yargs = require('yargs')
              .usage('Usage: \n$0 [stats.json file] --from [array of file names]\n\n or alternatively: \n\n[array of file names separated by newlines] | $0 [stats.json file]')
              .option('from', {
                alias: 'f',
                describe: 'list of files to start from',
                type: 'array'
              })
              .option('dependencies', {
                alias: 'd',
                describe: 'walk down the dependency tree',
                type: 'boolean'
              })
              .option('dependents', {
                alias: 'D',
                describe: 'walk up the dependency tree',
                type: 'boolean'
              })
              .option('count', {
                alias: 'c',
                describe: 'display the number of immediate dependencies / dependents',
                type: 'boolean'
              })
              .option('tree', {
                alias: 't',
                describe: 'output an ascii tree from the starting files',
                type: 'boolean'
              })
              .option('levels', {
                alias: 'l',
                describe: 'specify the number of levels to walk',
                type: 'number'
              })
              .alias('h', 'help')
              .help();
var argv = yargs.argv;

var webpackDeps = require('../index');

var statsFileName = argv._[0] || 'webpack-stats.json';
var statsFilePath = path.join(process.cwd(), statsFileName);

// why bother with callbacks when you can block?
var stats = JSON.parse(fs.readFileSync(statsFilePath, 'utf8'));

function formatFileNames(files) {
  return files
    .filter(function(file) {
      return file.length > 0;
    })
    .map(function(file) {
      return './' + path.join('.', file);
    });
}

function writeOut(arr) {
  arr.forEach(function(d) {
    process.stdout.write(d + '\n');
  });
}

function outputDepsList(filesToCheck, depsMap, maxLevels) {
  writeOut(webpackDeps.getAllDependentsForFiles(formatFileNames(filesToCheck), depsMap, maxLevels));
}

function outputDependentCount(startFrom, depsMap) {
  startFrom = startFrom || Object.keys(depsMap);
  writeOut(startFrom.map(function(d) {
    return '' + (depsMap[d] ? depsMap[d].length : '-') + '\t' +  d;
  }));
}

function outputFileTree(startFrom, depsMap, maxLevels) {
  console.log(archy(webpackDeps.getFileTree(startFrom, depsMap, maxLevels)));
}

function output(startFrom) {
  startFrom = formatFileNames(startFrom);

  var depGetter = argv.dependencies ? 'getDependenciesMap' : 'getDependentsMap';

  var depsMap = webpackDeps[depGetter](stats);

  if (argv.count) {
    outputDependentCount(startFrom, depsMap);
  } else if (argv.tree) {
    outputFileTree(startFrom, depsMap, argv.levels);
  } else {
    outputDepsList(startFrom, depsMap, argv.levels);
  }
}

if (argv.from) {
  output(argv.from);
} else {
  var input = [];
  var inputCheck;

  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(data) {
    input = input.concat(data.split(/\s/));
  });

  inputCheck = setTimeout(function() {
    process.stdin.pause()
    yargs.parse(['--help']);
  }, 100);

  process.stdin.on('end', function() {
    clearTimeout(inputCheck);

    output(input);
  });
}
