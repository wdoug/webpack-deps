#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var yargs = require('yargs')
              .usage('Usage: \n$0 [stats.json file] --files [array of file names]\n\n or alternatively: \n\n[array of file names] | $0 [stats.json file]')
              .alias('f', 'files')
              .array('f')
              .alias('h', 'help')
              .help();
var argv = yargs.argv;

var webpackDeps = require('../index');

var statsFileName = argv._[0] || 'webpack-stats.json';
var statsFilePath = path.join(process.cwd(), statsFileName);

// why bother with callbacks when you can block?
var stats = JSON.parse(fs.readFileSync(statsFilePath, 'utf8'));

function formatFileNames(files) {
  return files.map(function(file) {
    return './' + path.join('.', file);
  });
}

function findDeps(filesToCheck) {
  var dependentsMap = webpackDeps.getDependentsMap(stats);
  webpackDeps.getAllDependentsForFiles(formatFileNames(filesToCheck), dependentsMap)
             .forEach(function(d) {
               process.stdout.write(d + '\n');
             });
}

if (argv.files) {
  findDeps(argv.files);
} else {
  var filesToCheck = [];
  var inputCheck;

  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(data) {
    filesToCheck = filesToCheck.concat(data.split('\n'));
  });

  inputCheck = setTimeout(function() {
    process.stdin.pause()
    yargs.parse(['--help']);
  }, 100);

  process.stdin.on('end', function() {
    clearTimeout(inputCheck);

    findDeps(formatFileNames(filesToCheck));
  });
}
